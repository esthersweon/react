(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/estherweon/Desktop/react/src/app.js":[function(require,module,exports){
require('./friendgroup.js')
require('./hello.js')
require('./tweet.js')

},{"./friendgroup.js":"/Users/estherweon/Desktop/react/src/friendgroup.js","./hello.js":"/Users/estherweon/Desktop/react/src/hello.js","./tweet.js":"/Users/estherweon/Desktop/react/src/tweet.js"}],"/Users/estherweon/Desktop/react/src/friendgroup.js":[function(require,module,exports){
var FriendGroupContainer = React.createClass({displayName: "FriendGroupContainer",
  getInitialState: function () {
    return {
      groups: [],
      friends: []
    };
  },
  componentDidMount: function () {
    // Set this.state.groups to most recent groups data from database
    this.loadGroupData();

    // Set this.state.friends to most recent friends data from database
    this.loadFriendData();
  },
  loadGroupData: function () {
    // GET updated groups from database
    $.ajax({
      method: 'GET',
      url: '/groups',
      success: function (data) {
        this.setState({
          groups: data
        });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(status, err.toString());
      }.bind(this)
    });
  },
  loadFriendData: function () {
    // GET updated friends from database
    $.ajax({
      method: 'GET',
      url: '/friends',
      success: function (data) {
        this.setState({
          friends: data
        });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(status, err.toString());
      }.bind(this)
    });
  },
  handleAddFriend: function (groupId, friendId) {
    var url = '/groups/' + groupId + '/friends/' + friendId;

    // POST new friend to a group
    $.ajax({
      method: 'POST',
      url: url,
      success: function (response) {
        this.setState({
          groups: response
        });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(url, status, err.toString());
      }.bind(this)
    });
  },
  handleRemoveFriend: function (groupId, friendId) {
    var url = '/groups/' + groupId + '/friends/' + friendId;

    // DELETE friend from group
    $.ajax({
      method: 'DELETE',
      url: url,
      success: function (response) {
        this.setState({
          groups: response
        });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(url, status, err.toString());
      }.bind(this)
    });
  },
  getFriendGroupNodes: function() {
    return this.state.groups.map(function (group, idx) {
      var friends = this.state.friends.filter(function (friend) {
        return group.friendIds.indexOf(friend.id) > -1;
      });

      return (
        React.createElement(FriendGroup, {
          key:  idx, 
          id:  group.id, 
          name:  group.name, 
          friends:  this.state.friends, 
          groupFriends:  friends, 
          handleAddFriend:  this.handleAddFriend, 
          handleRemoveFriend:  this.handleRemoveFriend})
      )
    }.bind(this));
  },
  render: function () {
    return (
      React.createElement("div", null, 
        React.createElement("h2", null, "Friend Groups"), 
         this.getFriendGroupNodes() 
      )
    );
  }
});

var FriendGroup = React.createClass({displayName: "FriendGroup",
  render: function () {
    return (
      React.createElement("div", {className: "panel panel-default"}, 
        React.createElement("div", {className: "panel-heading"}, this.props.name), 
        React.createElement(FriendSearch, {
          groupId:  this.props.id, 
          friends:  this.props.friends, 
          handleAddFriend:  this.props.handleAddFriend}), 
        React.createElement(FriendsList, {
          groupId:  this.props.id, 
          friends:  this.props.groupFriends, 
          actionType: "Remove", 
          handleAction:  this.props.handleRemoveFriend})
      )
    );
  }
});

var FriendSearch = React.createClass({displayName: "FriendSearch",
  getInitialState: function () {
    return {
      searchTerm: '',
      filteredFriends: []
    }
  },
  handleAddFriend: function (groupId, friendId) {
    this.props.handleAddFriend(groupId, friendId);

    this.setState({
      searchTerm: '',
      filteredFriends: []
    })
  },
  handleTextChange: function (e) {
    var searchTerm = e.target.value;

    var filteredFriends = this.props.friends.filter(function (friend) {
      return searchTerm && friend.name.toLowerCase().includes(searchTerm.toLowerCase());
    });

    this.setState({
      searchTerm: searchTerm,
      filteredFriends: filteredFriends
    });
  },
  render: function () {
    return (
      React.createElement("div", {className: "panel-body"}, 
        React.createElement("input", {className: "form-control", 
          type: "text", 
          placeholder: "Search for friends", 
          value:  this.state.searchTerm, 
          onChange:  this.handleTextChange}), 
        React.createElement(FriendsList, {
          groupId:  this.props.groupId, 
          friends:  this.state.filteredFriends, 
          actionType: "Add", 
          handleAction:  this.handleAddFriend})
      )
    );
  }
});

var FriendsList = React.createClass({displayName: "FriendsList",
  handleAction: function (friend_id, e) {
    e.preventDefault();
    this.props.handleAction(this.props.groupId, friend_id);
  },
  getFriendNodes: function() {
    return this.props.friends.map(function (friend, idx) {
      return (
        React.createElement("li", {key:  idx, className: "list-group-item"}, 
          React.createElement("form", {className: "clearfix", onSubmit:  this.handleAction.bind(this, friend.id) }, 
             friend.name, 
            React.createElement("button", {className: "btn btn-default pull-right"},  this.props.actionType)
          )
        )
      );
    }.bind(this));
  },
  render: function () {
    return (
      React.createElement("ul", {className: "list-group"}, 
         this.getFriendNodes() 
      )
    );
  }
});

React.render(
  React.createElement(FriendGroupContainer, null),
  document.getElementById('friend-group')
);

},{}],"/Users/estherweon/Desktop/react/src/hello.js":[function(require,module,exports){
var styles = {
  text: {
    fontSize: '32px', 
    fontWeight: '600', 
    textDecoration: 'underline'
  }, 
  secondsText: {
    color: 'mediumaquamarine',
    fontSize: '24px'
  }
};

var Hello = React.createClass({displayName: "Hello",
  getInitialState: function () {
    return { seconds: 0 };
  },
  componentDidMount: function () {
    setInterval(function () {
      this.setState({ seconds: this.state.seconds + 1 });
    }.bind(this), 1000);
  },
  render: function() {
    return (
      React.createElement("div", {className: "timer"}, 
        React.createElement("div", {style:  styles.text},  this.props.text), 
        React.createElement("div", {style:  styles.secondsText},  this.state.seconds, " seconds")
      )
    );
  }
});

React.render(
  React.createElement(Hello, {text: "Time Spent on Page:"}),
  document.getElementById('hello')
);

},{}],"/Users/estherweon/Desktop/react/src/tweet.js":[function(require,module,exports){
var TwitterContainer = React.createClass({displayName: "TwitterContainer",
  getInitialState: function() {
    return { data: [] };
  },
  loadTweetsFromServer: function() {
    // GET updated set of tweets from database
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({ 
          data: data 
        });
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleTweetSubmit: function(tweet) {
    // Make copy of this.state.data
    // IMPORTANT: never directly manipulate this.state or this.props
    var tweets = this.state.data.slice();

    // Add most recent tweet to beginning of tweets array
    tweets.unshift(tweet);

    // POST updated set of tweets back to database
    this.setState({ data: tweets }, function() {
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        type: 'POST',
        data: tweet,
        success: function(data) {
          this.setState({
            data: data
          });
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    });
  },
  componentDidMount: function() {
    // Set this.state.data to most recent set of tweets from database
    this.loadTweetsFromServer();

    // Ping database for updated set of tweets every 2000 ms
    setInterval(this.loadTweetsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      React.createElement("div", {className: "tweetBox"}, 
        React.createElement("h1", null, "Tweets"), 
        React.createElement(TweetForm, {onTweetSubmit:  this.handleTweetSubmit}), 
        React.createElement(TweetList, {data:  this.state.data})
      )
    );
  }
});

var TweetForm = React.createClass({displayName: "TweetForm",
  handleSubmit: function(e) {
    e.preventDefault();

    // Get new author and text from the input fields
    var author = React.findDOMNode(this.refs.author).value.trim();
    var text = React.findDOMNode(this.refs.text).value.trim();

    // Do nothing if either input field is blank
    if (!text || !author) {
      return;
    }

    // Send new author and text up one level to TwitterContainer component
    // so updated tweets can be passed down again into TweetList component
    this.props.onTweetSubmit({author: author, text: text});

    // Set input fields back to empty
    React.findDOMNode(this.refs.author).value = '';
    React.findDOMNode(this.refs.text).value = '';
  },
  render: function() {
    return (
      React.createElement("form", {className: "tweetForm", onSubmit:  this.handleSubmit}, 
        React.createElement("div", {className: "col-md-3"}, 
          React.createElement("input", {type: "text", className: "form-control", placeholder: "Author Name", ref: "author"})
        ), 
        React.createElement("div", {className: "col-md-7"}, 
          React.createElement("input", {type: "text", className: "form-control", placeholder: "Tweet (140 chars max)", ref: "text"})
        ), 
        React.createElement("div", {className: "col-md-2"}, 
          React.createElement("input", {type: "submit", className: "btn btn-info", value: "Tweet"})
        )
      )
    );
  }
});

var TweetList = React.createClass({displayName: "TweetList",
  render: function() {
    var tweetNodes = this.props.data.reverse().map(function(tweet, idx) {
      return (
        // 'key' is a React-specific concept, but not mandatory for this tutorial
        // http://facebook.github.io/react/docs/multiple-components.html#dynamic-children
        React.createElement(Tweet, {key:  idx, author:  tweet.author, text:  tweet.text})
      );
    });
    return (
      React.createElement("div", {className: "tweetList"}, 
         tweetNodes 
      )
    );
  }
});

var Tweet = React.createClass({displayName: "Tweet",
  render: function() {
    return (
      React.createElement("div", {className: "tweet"}, 
        React.createElement("h2", {className: "tweetText"},  this.props.text), 
        React.createElement("span", {className: "tweetAuthor"}, " - ",  this.props.author)
      )
    );
  }
});


React.render(
  React.createElement(TwitterContainer, {url: "tweets.json", pollInterval:  2000 }),
  document.getElementById('tweets')
);

},{}]},{},["/Users/estherweon/Desktop/react/src/app.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
